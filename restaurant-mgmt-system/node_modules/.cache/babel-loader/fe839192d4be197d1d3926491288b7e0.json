{"ast":null,"code":"import { ADD_TABLE_ITEM, DELETE_TABLE_ITEM, TOGGLE_TABLE } from \"../constants/constants.js\";\nvar initialTableData = [];\n\nfor (let i = 0; i < 16; i++) {\n  initialTableData.push([]);\n}\n\nconst tableData = (state = initialTableData, action) => {\n  switch (action.type) {\n    case ADD_TABLE_ITEM:\n      var stateCopy = [];\n\n      for (let i = 0; i < 16; i++) {\n        stateCopy.push(state[i].slice());\n      }\n\n      stateCopy[action.tableId].push(action.item);\n      return stateCopy;\n\n    case DELETE_TABLE_ITEM:\n      var stateCopy = [];\n\n      for (let i = 0; i < 16; i++) {\n        stateCopy.push(state[i].slice());\n      }\n\n      stateCopy[action.tableId].splice(action.id, 1);\n      return stateCopy;\n\n    case TOGGLE_TABLE:\n      var stateCopy = [];\n\n      for (let i = 0; i < 16; i++) {\n        stateCopy.push(state[i].slice());\n      }\n\n      stateCopy[action.id] = [];\n      return stateCopy;\n\n    default:\n      return state;\n  }\n};\n/*\r\n\r\nThe tableData reducer is in charge of handling the state changes to the tableData\r\nattribute of the overall state. The tableData state should be a 2D array that\r\ncontains 16 arrays that each contain the ordered items for the table that they \r\nrepresent. The state initialized to be an array of 16 empty arrays.\r\n\r\nThe reducer handles the ADD_TABLE_ITEM, DELETE_TABLE_ITEM and TOGGLE_TABLE actions:\r\n\r\nADD_TABLE_ITEM - the reducer makes a copy of the 2D array, finds the array representing the\r\nthe tableID from the dispatched action, and deletes the dispatched action index from it.\r\n\r\nDELETE_TABLE_ITEM - The reducer makes a copy of the 2D array, finds the array representing \r\nthe tableId from the dispatched action and deletes the dispatched action index from it.\r\n\r\nTOGGLE_TABLE - The reducer makes a copy of the 2D array, finds the array representing the\r\ntableId from the dispatched action, and empties the array. (Both checking in and out result empty arrays)\r\n\r\n\r\n*/\n\n\nexport default tableData;","map":{"version":3,"sources":["/mnt/c/Users/Lucas/Projects/edx/react-router-redux/restaurant-mgmt-system/src/reducers/tableData.js"],"names":["ADD_TABLE_ITEM","DELETE_TABLE_ITEM","TOGGLE_TABLE","initialTableData","i","push","tableData","state","action","type","stateCopy","slice","tableId","item","splice","id"],"mappings":"AAAA,SACCA,cADD,EAECC,iBAFD,EAGCC,YAHD,QAIO,2BAJP;AAMA,IAAIC,gBAAgB,GAAG,EAAvB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BD,EAAAA,gBAAgB,CAACE,IAAjB,CAAsB,EAAtB;AACA;;AAED,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGJ,gBAAT,EAA2BK,MAA3B,KAAsC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKT,cAAL;AACC,UAAIU,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AAC3BM,QAAAA,SAAS,CAACL,IAAV,CAAeE,KAAK,CAACH,CAAD,CAAL,CAASO,KAAT,EAAf;AACA;;AACDD,MAAAA,SAAS,CAACF,MAAM,CAACI,OAAR,CAAT,CAA0BP,IAA1B,CAA+BG,MAAM,CAACK,IAAtC;AACA,aAAOH,SAAP;;AACD,SAAKT,iBAAL;AACC,UAAIS,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AAC3BM,QAAAA,SAAS,CAACL,IAAV,CAAeE,KAAK,CAACH,CAAD,CAAL,CAASO,KAAT,EAAf;AACA;;AACDD,MAAAA,SAAS,CAACF,MAAM,CAACI,OAAR,CAAT,CAA0BE,MAA1B,CAAiCN,MAAM,CAACO,EAAxC,EAA4C,CAA5C;AACA,aAAOL,SAAP;;AACD,SAAKR,YAAL;AACC,UAAIQ,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BM,QAAAA,SAAS,CAACL,IAAV,CAAeE,KAAK,CAACH,CAAD,CAAL,CAASO,KAAT,EAAf;AACA;;AACDD,MAAAA,SAAS,CAACF,MAAM,CAACO,EAAR,CAAT,GAAuB,EAAvB;AACA,aAAOL,SAAP;;AACD;AACC,aAAOH,KAAP;AAvBF;AAyBA,CA1BD;AA4BA;;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAeD,SAAf","sourcesContent":["import {\r\n\tADD_TABLE_ITEM,\r\n\tDELETE_TABLE_ITEM,\r\n\tTOGGLE_TABLE\r\n}\tfrom \"../constants/constants.js\";\r\n\r\nvar initialTableData = [];\r\n\r\nfor (let i = 0; i < 16; i++) {\r\n\tinitialTableData.push([]);\r\n}\r\n\r\nconst tableData = (state = initialTableData, action) => {\r\n\tswitch (action.type){\r\n\t\tcase ADD_TABLE_ITEM:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++){\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.tableId].push(action.item);\r\n\t\t\treturn stateCopy;\r\n\t\tcase DELETE_TABLE_ITEM:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++){\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.tableId].splice(action.id, 1);\r\n\t\t\treturn stateCopy;\r\n\t\tcase TOGGLE_TABLE:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++) {\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.id] = [];\r\n\t\t\treturn stateCopy;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n};\r\n\r\n/*\r\n\r\nThe tableData reducer is in charge of handling the state changes to the tableData\r\nattribute of the overall state. The tableData state should be a 2D array that\r\ncontains 16 arrays that each contain the ordered items for the table that they \r\nrepresent. The state initialized to be an array of 16 empty arrays.\r\n\r\nThe reducer handles the ADD_TABLE_ITEM, DELETE_TABLE_ITEM and TOGGLE_TABLE actions:\r\n\r\nADD_TABLE_ITEM - the reducer makes a copy of the 2D array, finds the array representing the\r\nthe tableID from the dispatched action, and deletes the dispatched action index from it.\r\n\r\nDELETE_TABLE_ITEM - The reducer makes a copy of the 2D array, finds the array representing \r\nthe tableId from the dispatched action and deletes the dispatched action index from it.\r\n\r\nTOGGLE_TABLE - The reducer makes a copy of the 2D array, finds the array representing the\r\ntableId from the dispatched action, and empties the array. (Both checking in and out result empty arrays)\r\n\r\n\r\n*/\r\n\r\nexport default tableData;"]},"metadata":{},"sourceType":"module"}