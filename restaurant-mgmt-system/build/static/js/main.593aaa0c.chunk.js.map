{"version":3,"sources":["constants/constants.js","reducers/tableStatusData.js","reducers/selectedTable.js","reducers/tableData.js","reducers/moneyEarned.js","reducers/reducer.js","index.js"],"names":["module","exports","SELECT_TABLE","TOGGLE_TABLE","INCREMENT_MONEY_EARNED","ADD_TABLE_ITEM","DELETE_TABLE_ITEM","selectedTable","state","arguments","length","undefined","action","type","id","initialTableData","i","push","tableStatusData","stateCopy","slice","tableData","tableId","item","splice","moneyEarned","amount","reducer","combineReducers","createStore","rootElement","document","getElementById","ReactDOM","render","react_default","a","createElement","className"],"mappings":"yEAOAA,EAAOC,QAAU,CAChBC,aARoB,eASpBC,aARoB,eASpBC,uBAR8B,yBAS9BC,eARsB,iBAStBC,kBARyB,6DCA1B,sDCiBeC,EAnBO,WAA0B,IAAzBC,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAMG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOC,MACd,KAAKX,eACJ,OAAIM,IAAUI,EAAOE,GAAW,KACpBF,EAAOE,GACpB,QACC,OAAON,IDNNO,EAAmB,GAEdC,EAAI,EAAGA,EAAI,GAAIA,IACvBD,EAAiBE,KAAK,IEGvB,IFAA,IAqBeC,EArBS,WAAsC,IAArCV,EAAqCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7BM,EAAkBH,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7D,OAAQC,EAAOC,MACd,KAAKV,eACJ,IAAIgB,EAAYX,EAAMY,QAEtB,OADAD,EAAUP,EAAOE,KAAOK,EAAUP,EAAOE,IAClCK,EACR,QACC,OAAOX,IETNO,EAAmB,GAEdC,EAAI,EAAGA,EAAI,GAAIA,IACvBD,EAAiBE,KAAK,IAGvB,IAiDeI,EAjDG,WAAsC,IAArCb,EAAqCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7BM,EAAkBH,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvD,OAAQC,EAAOC,MACd,KAAKR,iBAEJ,IADA,IAAIc,EAAY,GACPH,EAAI,EAAGA,EAAI,GAAIA,IACvBG,EAAUF,KAAKT,EAAMQ,GAAGI,SAGzB,OADAD,EAAUP,EAAOU,SAASL,KAAKL,EAAOW,MAC/BJ,EACR,KAAKb,oBACAa,EAAY,GAChB,IADA,IACSH,EAAI,EAAGA,EAAI,GAAIA,IACvBG,EAAUF,KAAKT,EAAMQ,GAAGI,SAGzB,OADAD,EAAUP,EAAOU,SAASE,OAAOZ,EAAOE,GAAI,GACrCK,EACR,KAAKhB,eACAgB,EAAY,GAChB,IADA,IACSH,EAAI,EAAGA,EAAI,GAAIA,IACvBG,EAAUF,KAAKT,EAAMQ,GAAGI,SAGzB,OADAD,EAAUP,EAAOE,IAAM,GAChBK,EACR,QACC,OAAOX,ICfKiB,EAlBK,WAAuB,IAAtBjB,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAAQC,EAAOC,MACd,KAAKT,yBACJ,OAAOI,EAAQI,EAAOc,OACvB,QACC,OAAOlB,ICYKmB,EAbCC,YAAgB,CAC/BrB,gBACAW,kBACAG,YACAI,gBCCWI,YAAYF,GAWxB,IAAMG,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOC,EAAAC,EAAAC,cAThB,WACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAAA,qBAMc,MAASP","file":"static/js/main.593aaa0c.chunk.js","sourcesContent":["const SELECT_TABLE = 'SELECT_TABLE';\r\nconst TOGGLE_TABLE = 'TOGGLE_TABLE';\r\nconst INCREMENT_MONEY_EARNED = 'INCREMENT_MONEY_EARNED';\r\nconst ADD_TABLE_ITEM = 'ADD_TABLE_ITEM';\r\nconst DELETE_TABLE_ITEM = 'DELETE_TABLE_ITEM';\r\n\r\n\r\nmodule.exports = {\r\n\tSELECT_TABLE,\r\n\tTOGGLE_TABLE,\r\n\tINCREMENT_MONEY_EARNED,\r\n\tADD_TABLE_ITEM,\r\n\tDELETE_TABLE_ITEM,\r\n};","import { TOGGLE_TABLE } from '../constants/constants.js';\r\n\r\nvar initialTableData = [];\r\n\r\nfor (let i = 0; i < 16; i++){\r\n\tinitialTableData.push([]);\r\n}\r\n\r\nconst tableStatusData = (state = initialTableData, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase TOGGLE_TABLE:\r\n\t\t\tvar stateCopy = state.slice();\r\n\t\t\tstateCopy[action.id] = !stateCopy[action.id];\r\n\t\t\treturn stateCopy;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n/*\r\nThe tableStatusData reducer is in charge of handling the state changes to \r\nthe tableStatusData attribue of the overall state. The tableStatusData state\r\nshould be an boolean array of the size 16 that represents whether each of \r\nthe 16 tables is checked in or not. The state array is initialized to contain \r\nall false values. The reducer only handles the TOGGLE_TABLE action. In the\r\nTOGGLE_TABLE action logic, we make a copy of the state using slice() and then\r\ntoggle the boolean value of the targeted index before returning the copy.\r\n*/\r\n\r\nexport default tableStatusData;","import { SELECT_TABLE } from \"../constants/constants.js\";\r\n\r\nconst selectedTable = (state = null, action) => {\r\n\tswitch (action.type){\r\n\t\tcase SELECT_TABLE:\r\n\t\t\tif (state === action.id) return null;\r\n\t\t\telse return action.id;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n/*\r\nThe selectedTable reducer is in charge of handling the state changes to the selectedTable\r\nattribute of the overall state. The selectedTable state should just be a single integer\r\nthat represents the id of the selected table. The state is initialized to null. The reducer\r\nonly handles the SELECT_TABLE action. In the SELECT_TABLE action logic, if the dispatched action\r\ncontains an id that is already selected, we return null to the deselect the table.\r\nOtherwise, we return the action id to select the table.\r\n\r\n*/\r\nexport default selectedTable;","import {\r\n\tADD_TABLE_ITEM,\r\n\tDELETE_TABLE_ITEM,\r\n\tTOGGLE_TABLE\r\n}\tfrom \"../constants/constants.js\";\r\n\r\nvar initialTableData = [];\r\n\r\nfor (let i = 0; i < 16; i++) {\r\n\tinitialTableData.push([]);\r\n}\r\n\r\nconst tableData = (state = initialTableData, action) => {\r\n\tswitch (action.type){\r\n\t\tcase ADD_TABLE_ITEM:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++){\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.tableId].push(action.item);\r\n\t\t\treturn stateCopy;\r\n\t\tcase DELETE_TABLE_ITEM:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++){\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.tableId].splice(action.id, 1);\r\n\t\t\treturn stateCopy;\r\n\t\tcase TOGGLE_TABLE:\r\n\t\t\tvar stateCopy = [];\r\n\t\t\tfor (let i = 0; i < 16; i++) {\r\n\t\t\t\tstateCopy.push(state[i].slice());\r\n\t\t\t}\r\n\t\t\tstateCopy[action.id] = [];\r\n\t\t\treturn stateCopy;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n};\r\n\r\n/*\r\n\r\nThe tableData reducer is in charge of handling the state changes to the tableData\r\nattribute of the overall state. The tableData state should be a 2D array that\r\ncontains 16 arrays that each contain the ordered items for the table that they \r\nrepresent. The state initialized to be an array of 16 empty arrays.\r\n\r\nThe reducer handles the ADD_TABLE_ITEM, DELETE_TABLE_ITEM and TOGGLE_TABLE actions:\r\n\r\nADD_TABLE_ITEM - the reducer makes a copy of the 2D array, finds the array representing the\r\nthe tableID from the dispatched action, and deletes the dispatched action index from it.\r\n\r\nDELETE_TABLE_ITEM - The reducer makes a copy of the 2D array, finds the array representing \r\nthe tableId from the dispatched action and deletes the dispatched action index from it.\r\n\r\nTOGGLE_TABLE - The reducer makes a copy of the 2D array, finds the array representing the\r\ntableId from the dispatched action, and empties the array. (Both checking in and out result empty arrays)\r\n\r\n\r\n*/\r\n\r\nexport default tableData;","import { INCREMENT_MONEY_EARNED } from \"../constants/constants.js\";\r\n\r\n\r\nconst moneyEarned = (state = 0, action) => {\r\n\tswitch (action.type){\r\n\t\tcase INCREMENT_MONEY_EARNED:\r\n\t\t\treturn state + action.amount;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n\r\n/*\r\n\r\nThe moneyEarned reducer is in charge of handling the state changes to hte moneyEarned attribute\r\nof the overall state. The moneyEarned state should just be an integer. The state is initialzed to 0.\r\nThe reducer only handles the INCREMENT_MONEY_EARNED action. In the INCREMENT_MONEY_EARNED action logic,\r\nthe action increment amount is added to the previous state.\r\n\r\n*/\r\nexport default moneyEarned;","import { combineReducers } from \"redux\";\r\nimport selectedTable from \"./selectedTable.js\";\r\nimport tableStatusData from \"./tableStatusData.js\";\r\nimport tableData from \"./tableData.js\";\r\nimport moneyEarned from \"./moneyEarned.js\";\r\n\r\n\r\nconst reducer = combineReducers({\r\n\tselectedTable,\r\n\ttableStatusData,\r\n\ttableData,\r\n\tmoneyEarned\r\n});\r\n\r\n/*\r\n\r\nAll 4 reducers are combined together by using the combineReducers() method from the redux library\r\n\r\n*/\r\n\r\nexport default reducer;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\nimport reducer from \"./reducers/reducer.js\";\r\nimport addTableItem from \"./actions/addTableItem.js\";\r\nimport deleteTableItem from \"./actions/deleteTableItem.js\";\r\nimport incrementMoneyEarned from \"./actions/incrementMoneyEarned.js\";\r\nimport selectTable from \"./actions/selectTable.js\";\r\nimport toggleTable from \"./actions/toggleTable.js\";\r\n\r\n// need to create styles.css and import it\r\n\r\nvar store = createStore(reducer);\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\t\t<h1>Hello</h1>\r\n\t</div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}